
BasicBM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002314  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024dc  080024dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024dc  080024dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024dc  080024dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024dc  080024dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  080024f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080024f0  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abfc  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d62  00000000  00000000  0002ac7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096f  00000000  00000000  0002d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025707  00000000  00000000  0002df9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3da  00000000  00000000  000536a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e92e0  00000000  00000000  00060a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031d4  00000000  00000000  00149d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0014cf34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002484 	.word	0x08002484

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002484 	.word	0x08002484

080001c8 <btp_Constructor>:
/******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *****************************************************************************/
void btp_Constructor(ButtonPress_t* btp, uint32_t min, uint32_t max,
		TimerOverflow_t* source_tov, TimerOverflow_t* target_tov)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
	btp->button_is_pressed = false;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	2200      	movs	r2, #0
 80001da:	701a      	strb	r2, [r3, #0]
	btp->min_overflow_trigger_count = min;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	605a      	str	r2, [r3, #4]
	btp->max_overflow_trigger_count = max;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	687a      	ldr	r2, [r7, #4]
 80001e6:	609a      	str	r2, [r3, #8]
	btp->source_tov = source_tov;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	683a      	ldr	r2, [r7, #0]
 80001ec:	60da      	str	r2, [r3, #12]
	btp->target_tov = target_tov;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	69ba      	ldr	r2, [r7, #24]
 80001f2:	611a      	str	r2, [r3, #16]
}
 80001f4:	bf00      	nop
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <btp_press>:

void btp_press(ButtonPress_t* btp)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	btp->button_is_pressed = true;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2201      	movs	r2, #1
 800020c:	701a      	strb	r2, [r3, #0]
	tov_activateOverflowTimer(btp->source_tov);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f876 	bl	8000304 <tov_activateOverflowTimer>
}
 8000218:	bf00      	nop
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <btp_release>:

void btp_release(ButtonPress_t* btp)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	btp->button_is_pressed = false;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
	tov_deactivateOverflowTimer(btp->source_tov);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f873 	bl	800031e <tov_deactivateOverflowTimer>
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <btp_incr_overflow_trigger_count>:

void btp_incr_overflow_trigger_count(ButtonPress_t* btp, uint8_t delta)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
	uint32_t curr_trigger = btp->target_tov->overflow_count_trigger;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	60fb      	str	r3, [r7, #12]
	if (curr_trigger + delta > btp->max_overflow_trigger_count)
 8000254:	78fa      	ldrb	r2, [r7, #3]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	441a      	add	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	429a      	cmp	r2, r3
 8000260:	d908      	bls.n	8000274 <btp_incr_overflow_trigger_count+0x34>
	{
		tov_setOverflowCountTrigger(btp->target_tov, btp->max_overflow_trigger_count);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	691a      	ldr	r2, [r3, #16]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	4619      	mov	r1, r3
 800026c:	4610      	mov	r0, r2
 800026e:	f000 f8ad 	bl	80003cc <tov_setOverflowCountTrigger>
	}
	else
	{
		tov_setOverflowCountTrigger(btp->target_tov, curr_trigger + delta);
	}
}
 8000272:	e007      	b.n	8000284 <btp_incr_overflow_trigger_count+0x44>
		tov_setOverflowCountTrigger(btp->target_tov, curr_trigger + delta);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6918      	ldr	r0, [r3, #16]
 8000278:	78fa      	ldrb	r2, [r7, #3]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4413      	add	r3, r2
 800027e:	4619      	mov	r1, r3
 8000280:	f000 f8a4 	bl	80003cc <tov_setOverflowCountTrigger>
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <btp_decr_overflow_trigger_count>:

void btp_decr_overflow_trigger_count(ButtonPress_t* btp, uint8_t delta)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	70fb      	strb	r3, [r7, #3]
	uint32_t curr_trigger = btp->target_tov->overflow_count_trigger;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	691b      	ldr	r3, [r3, #16]
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	60fb      	str	r3, [r7, #12]
	if ( ((int32_t)curr_trigger - delta) < ((int32_t)(btp->min_overflow_trigger_count)) )
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	78fb      	ldrb	r3, [r7, #3]
 80002a4:	1ad3      	subs	r3, r2, r3
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	4293      	cmp	r3, r2
 80002ac:	da08      	bge.n	80002c0 <btp_decr_overflow_trigger_count+0x34>
	{
		tov_setOverflowCountTrigger(btp->target_tov, btp->min_overflow_trigger_count);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	691a      	ldr	r2, [r3, #16]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	4619      	mov	r1, r3
 80002b8:	4610      	mov	r0, r2
 80002ba:	f000 f887 	bl	80003cc <tov_setOverflowCountTrigger>
	}
	else
	{
		tov_setOverflowCountTrigger(btp->target_tov, curr_trigger - delta);
	}
}
 80002be:	e007      	b.n	80002d0 <btp_decr_overflow_trigger_count+0x44>
		tov_setOverflowCountTrigger(btp->target_tov, curr_trigger - delta);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6918      	ldr	r0, [r3, #16]
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	4619      	mov	r1, r3
 80002cc:	f000 f87e 	bl	80003cc <tov_setOverflowCountTrigger>
}
 80002d0:	bf00      	nop
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <tov_Constructor>:
/******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *****************************************************************************/
// constructor
TimerOverflow_t* tov_Constructor(TimerOverflow_t* tov, uint32_t max_overflow_value)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	tov->overflow_counter = 0;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
	tov->overflow_count_trigger = max_overflow_value;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	609a      	str	r2, [r3, #8]
	tov->overflow_flag = false;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2200      	movs	r2, #0
 80002f2:	731a      	strb	r2, [r3, #12]
	tov_deactivateOverflowTimer(tov);
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f000 f812 	bl	800031e <tov_deactivateOverflowTimer>

	return tov;
 80002fa:	687b      	ldr	r3, [r7, #4]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <tov_activateOverflowTimer>:

// activate/deactivate OverflowTimer
void tov_activateOverflowTimer(TimerOverflow_t* tov)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	tov->active = true;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <tov_deactivateOverflowTimer>:
void tov_deactivateOverflowTimer(TimerOverflow_t* tov)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
	tov->active = false;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <tov_getActive>:
bool tov_getActive(TimerOverflow_t tov)
{
 8000338:	b490      	push	{r4, r7}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	463c      	mov	r4, r7
 8000340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return tov.active;
 8000344:	783b      	ldrb	r3, [r7, #0]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bc90      	pop	{r4, r7}
 800034e:	4770      	bx	lr

08000350 <tov_getOverflowFlag>:


// overflow_flag methods
bool tov_getOverflowFlag(TimerOverflow_t* tov)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	// get overflow_flag value
	bool overflow_flag_value = tov->overflow_flag;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	7b1b      	ldrb	r3, [r3, #12]
 800035c:	73fb      	strb	r3, [r7, #15]
	// reset overflow_flag if it's set to true
	if (tov->overflow_flag == true)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	7b1b      	ldrb	r3, [r3, #12]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d002      	beq.n	800036c <tov_getOverflowFlag+0x1c>
	{
		tov->overflow_flag = false;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2200      	movs	r2, #0
 800036a:	731a      	strb	r2, [r3, #12]
	}
	// return old value of overflow_flag
	return overflow_flag_value;
 800036c:	7bfb      	ldrb	r3, [r7, #15]
}
 800036e:	4618      	mov	r0, r3
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <tov_setOverflowFlag>:
void tov_setOverflowFlag(TimerOverflow_t* tov, bool new_value)
{
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	460b      	mov	r3, r1
 8000384:	70fb      	strb	r3, [r7, #3]
	tov->overflow_flag = new_value;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	78fa      	ldrb	r2, [r7, #3]
 800038a:	731a      	strb	r2, [r3, #12]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <tov_incrementOverflowCounter>:

// overflow_counter methods
void tov_incrementOverflowCounter(TimerOverflow_t* tov)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	// increment overflow counter value
	tov->overflow_counter += 1;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	1c5a      	adds	r2, r3, #1
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	605a      	str	r2, [r3, #4]
	// check if counter overflows
	if (tov->overflow_counter >= tov->overflow_count_trigger)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	685a      	ldr	r2, [r3, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d306      	bcc.n	80003c4 <tov_incrementOverflowCounter+0x2c>
	{
		tov_setOverflowFlag(tov, true);
 80003b6:	2101      	movs	r1, #1
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ffde 	bl	800037a <tov_setOverflowFlag>
		tov->overflow_counter = 0;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
	}
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <tov_setOverflowCountTrigger>:

// max_overflow_counter methods
void tov_setOverflowCountTrigger(TimerOverflow_t* tov, uint32_t new_value)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
	tov->overflow_count_trigger = new_value;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	683a      	ldr	r2, [r7, #0]
 80003da:	609a      	str	r2, [r3, #8]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fc:	4b24      	ldr	r3, [pc, #144]	; (8000490 <MX_GPIO_Init+0xa8>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a23      	ldr	r2, [pc, #140]	; (8000490 <MX_GPIO_Init+0xa8>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <MX_GPIO_Init+0xa8>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2102      	movs	r1, #2
 8000418:	481e      	ldr	r0, [pc, #120]	; (8000494 <MX_GPIO_Init+0xac>)
 800041a:	f000 fe5f 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800041e:	2302      	movs	r3, #2
 8000420:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	4818      	ldr	r0, [pc, #96]	; (8000494 <MX_GPIO_Init+0xac>)
 8000434:	f000 fc90 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8000438:	2304      	movs	r3, #4
 800043a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800043c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000440:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000442:	2301      	movs	r3, #1
 8000444:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4619      	mov	r1, r3
 800044a:	4812      	ldr	r0, [pc, #72]	; (8000494 <MX_GPIO_Init+0xac>)
 800044c:	f000 fc84 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8000450:	2308      	movs	r3, #8
 8000452:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000454:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000458:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800045a:	2301      	movs	r3, #1
 800045c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4619      	mov	r1, r3
 8000462:	480c      	ldr	r0, [pc, #48]	; (8000494 <MX_GPIO_Init+0xac>)
 8000464:	f000 fc78 	bl	8000d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 4, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2104      	movs	r1, #4
 800046c:	2008      	movs	r0, #8
 800046e:	f000 fc3c 	bl	8000cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000472:	2008      	movs	r0, #8
 8000474:	f000 fc55 	bl	8000d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 4, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2104      	movs	r1, #4
 800047c:	2009      	movs	r0, #9
 800047e:	f000 fc34 	bl	8000cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000482:	2009      	movs	r0, #9
 8000484:	f000 fc4d 	bl	8000d22 <HAL_NVIC_EnableIRQ>

}
 8000488:	bf00      	nop
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	48000800 	.word	0x48000800

08000498 <gpio_setDigOut>:

/* USER CODE BEGIN 2 */
// Digital Outputs
void gpio_setDigOut(GPIO_TypeDef* port, uint16_t pin)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	460b      	mov	r3, r1
 80004a2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80004a4:	887b      	ldrh	r3, [r7, #2]
 80004a6:	2201      	movs	r2, #1
 80004a8:	4619      	mov	r1, r3
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f000 fe16 	bl	80010dc <HAL_GPIO_WritePin>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <gpio_resetDigOut>:

void gpio_resetDigOut(GPIO_TypeDef* port, uint16_t pin)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80004c4:	887b      	ldrh	r3, [r7, #2]
 80004c6:	2200      	movs	r2, #0
 80004c8:	4619      	mov	r1, r3
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 fe06 	bl	80010dc <HAL_GPIO_WritePin>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <gpio_toggleDigOut>:

void gpio_toggleDigOut(GPIO_TypeDef* port, uint16_t pin)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(port, pin);
 80004e4:	887b      	ldrh	r3, [r7, #2]
 80004e6:	4619      	mov	r1, r3
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 fe0f 	bl	800110c <HAL_GPIO_TogglePin>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <gpio_getDigIn>:


// Digital Inputs
bool gpio_getDigIn(GPIO_TypeDef* port, uint16_t pin)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	460b      	mov	r3, r1
 8000500:	807b      	strh	r3, [r7, #2]
	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(port, pin))
 8000502:	887b      	ldrh	r3, [r7, #2]
 8000504:	4619      	mov	r1, r3
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 fdd0 	bl	80010ac <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b01      	cmp	r3, #1
 8000510:	d101      	bne.n	8000516 <gpio_getDigIn+0x20>
	{
		return false;	// assume pull-up resistors
 8000512:	2300      	movs	r3, #0
 8000514:	e000      	b.n	8000518 <gpio_getDigIn+0x22>
	}
	else
	{
		return true;
 8000516:	2301      	movs	r3, #1
	}
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <HAL_GPIO_EXTI_Callback>:
	//return ret_val;
}
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
  if (BTN_LEFT_Pin == GPIO_Pin)
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	2b04      	cmp	r3, #4
 800052e:	d113      	bne.n	8000558 <HAL_GPIO_EXTI_Callback+0x38>
  {
	  bool pin_state = gpio_getDigIn(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin);
 8000530:	2104      	movs	r1, #4
 8000532:	4817      	ldr	r0, [pc, #92]	; (8000590 <HAL_GPIO_EXTI_Callback+0x70>)
 8000534:	f7ff ffdf 	bl	80004f6 <gpio_getDigIn>
 8000538:	4603      	mov	r3, r0
 800053a:	73fb      	strb	r3, [r7, #15]
	  if (pin_state == true)
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d007      	beq.n	8000552 <HAL_GPIO_EXTI_Callback+0x32>
	  {
		  btp_press(&btp_left);
 8000542:	4814      	ldr	r0, [pc, #80]	; (8000594 <HAL_GPIO_EXTI_Callback+0x74>)
 8000544:	f7ff fe5c 	bl	8000200 <btp_press>
		  btp_decr_overflow_trigger_count(&btp_left, 10);
 8000548:	210a      	movs	r1, #10
 800054a:	4812      	ldr	r0, [pc, #72]	; (8000594 <HAL_GPIO_EXTI_Callback+0x74>)
 800054c:	f7ff fe9e 	bl	800028c <btp_decr_overflow_trigger_count>
 8000550:	e002      	b.n	8000558 <HAL_GPIO_EXTI_Callback+0x38>
	  }
	  else
	  {
		  btp_release(&btp_left);
 8000552:	4810      	ldr	r0, [pc, #64]	; (8000594 <HAL_GPIO_EXTI_Callback+0x74>)
 8000554:	f7ff fe64 	bl	8000220 <btp_release>
	  }
  }

  if (BTN_RIGHT_Pin == GPIO_Pin)
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	2b08      	cmp	r3, #8
 800055c:	d113      	bne.n	8000586 <HAL_GPIO_EXTI_Callback+0x66>
  {
	  bool pin_state = gpio_getDigIn(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin);
 800055e:	2108      	movs	r1, #8
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <HAL_GPIO_EXTI_Callback+0x70>)
 8000562:	f7ff ffc8 	bl	80004f6 <gpio_getDigIn>
 8000566:	4603      	mov	r3, r0
 8000568:	73bb      	strb	r3, [r7, #14]
	  if (pin_state == true)
 800056a:	7bbb      	ldrb	r3, [r7, #14]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d007      	beq.n	8000580 <HAL_GPIO_EXTI_Callback+0x60>
	  {
		  btp_press(&btp_right);
 8000570:	4809      	ldr	r0, [pc, #36]	; (8000598 <HAL_GPIO_EXTI_Callback+0x78>)
 8000572:	f7ff fe45 	bl	8000200 <btp_press>
		  btp_incr_overflow_trigger_count(&btp_right, 5);
 8000576:	2105      	movs	r1, #5
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <HAL_GPIO_EXTI_Callback+0x78>)
 800057a:	f7ff fe61 	bl	8000240 <btp_incr_overflow_trigger_count>
	  else
	  {
		  btp_release(&btp_right);
	  }
  }
}
 800057e:	e002      	b.n	8000586 <HAL_GPIO_EXTI_Callback+0x66>
		  btp_release(&btp_right);
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <HAL_GPIO_EXTI_Callback+0x78>)
 8000582:	f7ff fe4d 	bl	8000220 <btp_release>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	48000800 	.word	0x48000800
 8000594:	20000028 	.word	0x20000028
 8000598:	2000003c 	.word	0x2000003c

0800059c <gpio_InitSequence>:

void gpio_InitSequence(unsigned int del_ms, unsigned int blink_count)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	gpio_setDigOut(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80005a6:	2102      	movs	r1, #2
 80005a8:	481a      	ldr	r0, [pc, #104]	; (8000614 <gpio_InitSequence+0x78>)
 80005aa:	f7ff ff75 	bl	8000498 <gpio_setDigOut>
	HAL_Delay(del_ms);
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 fa9c 	bl	8000aec <HAL_Delay>
	gpio_resetDigOut(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80005b4:	2102      	movs	r1, #2
 80005b6:	4817      	ldr	r0, [pc, #92]	; (8000614 <gpio_InitSequence+0x78>)
 80005b8:	f7ff ff7e 	bl	80004b8 <gpio_resetDigOut>
	for (int i = 0; i < blink_count; i++)
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e010      	b.n	80005e4 <gpio_InitSequence+0x48>
	{
		HAL_Delay(del_ms);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 fa92 	bl	8000aec <HAL_Delay>
		gpio_toggleDigOut(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80005c8:	2102      	movs	r1, #2
 80005ca:	4812      	ldr	r0, [pc, #72]	; (8000614 <gpio_InitSequence+0x78>)
 80005cc:	f7ff ff84 	bl	80004d8 <gpio_toggleDigOut>
		HAL_Delay(del_ms);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 fa8b 	bl	8000aec <HAL_Delay>
		gpio_toggleDigOut(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80005d6:	2102      	movs	r1, #2
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <gpio_InitSequence+0x78>)
 80005da:	f7ff ff7d 	bl	80004d8 <gpio_toggleDigOut>
	for (int i = 0; i < blink_count; i++)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8ea      	bhi.n	80005c2 <gpio_InitSequence+0x26>
	}

	// setup Button_Press_t instances
	btp_Constructor(&btp_left, 10, 100, &tov_left_button, &tov_led);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <gpio_InitSequence+0x7c>)
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <gpio_InitSequence+0x80>)
 80005f2:	2264      	movs	r2, #100	; 0x64
 80005f4:	210a      	movs	r1, #10
 80005f6:	480a      	ldr	r0, [pc, #40]	; (8000620 <gpio_InitSequence+0x84>)
 80005f8:	f7ff fde6 	bl	80001c8 <btp_Constructor>
	btp_Constructor(&btp_right, 10, 100, &tov_right_button, &tov_led);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <gpio_InitSequence+0x7c>)
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <gpio_InitSequence+0x88>)
 8000602:	2264      	movs	r2, #100	; 0x64
 8000604:	210a      	movs	r1, #10
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <gpio_InitSequence+0x8c>)
 8000608:	f7ff fdde 	bl	80001c8 <btp_Constructor>
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	48000800 	.word	0x48000800
 8000618:	20000050 	.word	0x20000050
 800061c:	20000060 	.word	0x20000060
 8000620:	20000028 	.word	0x20000028
 8000624:	20000070 	.word	0x20000070
 8000628:	2000003c 	.word	0x2000003c

0800062c <gpio_pollLedTimer>:

void gpio_pollLedTimer(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	if (tov_getOverflowFlag(&tov_led) == true)
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <gpio_pollLedTimer+0x1c>)
 8000632:	f7ff fe8d 	bl	8000350 <tov_getOverflowFlag>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d003      	beq.n	8000644 <gpio_pollLedTimer+0x18>
	{
		gpio_toggleDigOut(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800063c:	2102      	movs	r1, #2
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <gpio_pollLedTimer+0x20>)
 8000640:	f7ff ff4a 	bl	80004d8 <gpio_toggleDigOut>
	}
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000050 	.word	0x20000050
 800064c:	48000800 	.word	0x48000800

08000650 <gpio_pollLeftBtnTimer>:

void gpio_pollLeftBtnTimer(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	if (tov_getOverflowFlag(&tov_left_button) == true)
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <gpio_pollLeftBtnTimer+0x1c>)
 8000656:	f7ff fe7b 	bl	8000350 <tov_getOverflowFlag>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <gpio_pollLeftBtnTimer+0x18>
	{
		btp_decr_overflow_trigger_count(&btp_left, 2);
 8000660:	2102      	movs	r1, #2
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <gpio_pollLeftBtnTimer+0x20>)
 8000664:	f7ff fe12 	bl	800028c <btp_decr_overflow_trigger_count>
	}
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000060 	.word	0x20000060
 8000670:	20000028 	.word	0x20000028

08000674 <gpio_pollRightBtnTimer>:

void gpio_pollRightBtnTimer(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	if (tov_getOverflowFlag(&tov_right_button) == true)
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <gpio_pollRightBtnTimer+0x1c>)
 800067a:	f7ff fe69 	bl	8000350 <tov_getOverflowFlag>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <gpio_pollRightBtnTimer+0x18>
	{
		btp_incr_overflow_trigger_count(&btp_right, 2);
 8000684:	2102      	movs	r1, #2
 8000686:	4803      	ldr	r0, [pc, #12]	; (8000694 <gpio_pollRightBtnTimer+0x20>)
 8000688:	f7ff fdda 	bl	8000240 <btp_incr_overflow_trigger_count>
	}
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000070 	.word	0x20000070
 8000694:	2000003c 	.word	0x2000003c

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 f9b1 	bl	8000a02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f814 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f7ff fea0 	bl	80003e8 <MX_GPIO_Init>
  MX_TIM6_Init();
 80006a8:	f000 f8d4 	bl	8000854 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  /* initialize peripherals */
  // initialize Timer6
  HAL_TIM_Base_Start_IT(&htim6);
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <main+0x30>)
 80006ae:	f001 fbe3 	bl	8001e78 <HAL_TIM_Base_Start_IT>

  // initial LED sequence
  gpio_InitSequence(100, 5);
 80006b2:	2105      	movs	r1, #5
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f7ff ff71 	bl	800059c <gpio_InitSequence>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  gpio_pollLedTimer();
 80006ba:	f7ff ffb7 	bl	800062c <gpio_pollLedTimer>
	  gpio_pollLeftBtnTimer();
 80006be:	f7ff ffc7 	bl	8000650 <gpio_pollLeftBtnTimer>
	  gpio_pollRightBtnTimer();
 80006c2:	f7ff ffd7 	bl	8000674 <gpio_pollRightBtnTimer>
	  gpio_pollLedTimer();
 80006c6:	e7f8      	b.n	80006ba <main+0x22>
 80006c8:	20000080 	.word	0x20000080

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b096      	sub	sp, #88	; 0x58
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2244      	movs	r2, #68	; 0x44
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fea6 	bl	800242c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f2:	f000 fd4b 	bl	800118c <HAL_PWREx_ControlVoltageScaling>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006fc:	f000 f82c 	bl	8000758 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000700:	2310      	movs	r3, #16
 8000702:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800070c:	2360      	movs	r3, #96	; 0x60
 800070e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fd8d 	bl	8001238 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000724:	f000 f818 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f001 f955 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800074c:	f000 f804 	bl	8000758 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3758      	adds	r7, #88	; 0x58
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x44>)
 800076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <HAL_MspInit+0x44>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6613      	str	r3, [r2, #96]	; 0x60
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_MspInit+0x44>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x44>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_MspInit+0x44>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6593      	str	r3, [r2, #88]	; 0x58
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x44>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f958 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8000804:	2004      	movs	r0, #4
 8000806:	f000 fc9b 	bl	8001140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}

0800080e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8000812:	2008      	movs	r0, #8
 8000814:	f000 fc94 	bl	8001140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <TIM6_DAC_IRQHandler+0x10>)
 8000822:	f001 fb99 	bl	8001f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000080 	.word	0x20000080

08000830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_TIM6_Init+0x64>)
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <MX_TIM6_Init+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_TIM6_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_TIM6_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39999;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_TIM6_Init+0x64>)
 8000878:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800087c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_TIM6_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MX_TIM6_Init+0x64>)
 8000886:	f001 fa9f 	bl	8001dc8 <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000890:	f7ff ff62 	bl	8000758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_TIM6_Init+0x64>)
 80008a2:	f001 fd1d 	bl	80022e0 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f7ff ff54 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000080 	.word	0x20000080
 80008bc:	40001000 	.word	0x40001000

080008c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a16      	ldr	r2, [pc, #88]	; (8000928 <HAL_TIM_Base_MspInit+0x68>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d126      	bne.n	8000920 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */
	__HAL_TIM_SET_COUNTER(&htim6, 0);	// prevent timer from automatic overflow after enabling
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <HAL_TIM_Base_MspInit+0x6c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_TIM_Base_MspInit+0x70>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <HAL_TIM_Base_MspInit+0x70>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6593      	str	r3, [r2, #88]	; 0x58
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_TIM_Base_MspInit+0x70>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	2036      	movs	r0, #54	; 0x36
 80008f8:	f000 f9f7 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008fc:	2036      	movs	r0, #54	; 0x36
 80008fe:	f000 fa10 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */
    // TimerOverflow for led diode
    tov_Constructor(&tov_led, 100);
 8000902:	2164      	movs	r1, #100	; 0x64
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <HAL_TIM_Base_MspInit+0x74>)
 8000906:	f7ff fce7 	bl	80002d8 <tov_Constructor>
    tov_activateOverflowTimer(&tov_led);
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <HAL_TIM_Base_MspInit+0x74>)
 800090c:	f7ff fcfa 	bl	8000304 <tov_activateOverflowTimer>
    // TimerOVerflow for left button
    tov_Constructor(&tov_left_button, 30);
 8000910:	211e      	movs	r1, #30
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <HAL_TIM_Base_MspInit+0x78>)
 8000914:	f7ff fce0 	bl	80002d8 <tov_Constructor>
    tov_Constructor(&tov_right_button, 30);
 8000918:	211e      	movs	r1, #30
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <HAL_TIM_Base_MspInit+0x7c>)
 800091c:	f7ff fcdc 	bl	80002d8 <tov_Constructor>

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40001000 	.word	0x40001000
 800092c:	20000080 	.word	0x20000080
 8000930:	40021000 	.word	0x40021000
 8000934:	20000050 	.word	0x20000050
 8000938:	20000060 	.word	0x20000060
 800093c:	20000070 	.word	0x20000070

08000940 <htim6_callback>:
}

/* USER CODE BEGIN 1 */

static void htim6_callback(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	if (tov_getActive(tov_led) == true)
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <htim6_callback+0x44>)
 8000946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000948:	f7ff fcf6 	bl	8000338 <tov_getActive>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d002      	beq.n	8000958 <htim6_callback+0x18>
	{
		tov_incrementOverflowCounter(&tov_led);
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <htim6_callback+0x44>)
 8000954:	f7ff fd20 	bl	8000398 <tov_incrementOverflowCounter>
	}

	if (tov_getActive(tov_left_button) == true)
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <htim6_callback+0x48>)
 800095a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095c:	f7ff fcec 	bl	8000338 <tov_getActive>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d002      	beq.n	800096c <htim6_callback+0x2c>
	{
		tov_incrementOverflowCounter(&tov_left_button);
 8000966:	4808      	ldr	r0, [pc, #32]	; (8000988 <htim6_callback+0x48>)
 8000968:	f7ff fd16 	bl	8000398 <tov_incrementOverflowCounter>
	}

	if (tov_getActive(tov_right_button) == true)
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <htim6_callback+0x4c>)
 800096e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000970:	f7ff fce2 	bl	8000338 <tov_getActive>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <htim6_callback+0x40>
	{
		tov_incrementOverflowCounter(&tov_right_button);
 800097a:	4804      	ldr	r0, [pc, #16]	; (800098c <htim6_callback+0x4c>)
 800097c:	f7ff fd0c 	bl	8000398 <tov_incrementOverflowCounter>
	}
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000050 	.word	0x20000050
 8000988:	20000060 	.word	0x20000060
 800098c:	20000070 	.word	0x20000070

08000990 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d101      	bne.n	80009a4 <HAL_TIM_PeriodElapsedCallback+0x14>
	htim6_callback();
 80009a0:	f7ff ffce 	bl	8000940 <htim6_callback>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000080 	.word	0x20000080

080009b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b4:	f7ff ff3c 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490d      	ldr	r1, [pc, #52]	; (80009f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0a      	ldr	r4, [pc, #40]	; (80009fc <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009de:	f001 fd2d 	bl	800243c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e2:	f7ff fe59 	bl	8000698 <main>

080009e6 <LoopForever>:

LoopForever:
    b LoopForever
 80009e6:	e7fe      	b.n	80009e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f4:	080024e4 	.word	0x080024e4
  ldr r2, =_sbss
 80009f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009fc:	200000d0 	.word	0x200000d0

08000a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_2_IRQHandler>

08000a02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f961 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a12:	200f      	movs	r0, #15
 8000a14:	f000 f80e 	bl	8000a34 <HAL_InitTick>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	71fb      	strb	r3, [r7, #7]
 8000a22:	e001      	b.n	8000a28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a24:	f7ff fe9e 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a28:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d023      	beq.n	8000a90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_InitTick+0x70>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f96d 	bl	8000d3e <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10f      	bne.n	8000a8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d809      	bhi.n	8000a84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f937 	bl	8000cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0x74>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e007      	b.n	8000a94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e004      	b.n	8000a94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e001      	b.n	8000a94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200000cc 	.word	0x200000cc

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000cc 	.word	0x200000cc

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff ffee 	bl	8000ad4 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffde 	bl	8000ad4 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <__NVIC_EnableIRQ+0x38>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff8e 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff29 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff3e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff8e 	bl	8000c28 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff31 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffa2 	bl	8000c90 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d66:	e17f      	b.n	8001068 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8171 	beq.w	8001062 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d005      	beq.n	8000d98 <HAL_GPIO_Init+0x40>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d130      	bne.n	8000dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 0201 	and.w	r2, r3, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d118      	bne.n	8000e38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	6939      	ldr	r1, [r7, #16]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80ac 	beq.w	8001062 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b5f      	ldr	r3, [pc, #380]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0e:	4a5e      	ldr	r2, [pc, #376]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6613      	str	r3, [r2, #96]	; 0x60
 8000f16:	4b5c      	ldr	r3, [pc, #368]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f22:	4a5a      	ldr	r2, [pc, #360]	; (800108c <HAL_GPIO_Init+0x334>)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x242>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x338>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x23e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x33c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x23a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x340>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x236>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x344>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x232>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x348>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x22e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x34c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x22a>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00c      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e00a      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fac:	4937      	ldr	r1, [pc, #220]	; (800108c <HAL_GPIO_Init+0x334>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <HAL_GPIO_Init+0x350>)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_GPIO_Init+0x350>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <HAL_GPIO_Init+0x350>)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	f47f ae78 	bne.w	8000d68 <HAL_GPIO_Init+0x10>
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000800 	.word	0x48000800
 8001098:	48000c00 	.word	0x48000c00
 800109c:	48001000 	.word	0x48001000
 80010a0:	48001400 	.word	0x48001400
 80010a4:	48001800 	.word	0x48001800
 80010a8:	40010400 	.word	0x40010400

080010ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	4013      	ands	r3, r2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e001      	b.n	80010ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4013      	ands	r3, r2
 8001124:	041a      	lsls	r2, r3, #16
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43d9      	mvns	r1, r3
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	400b      	ands	r3, r1
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9de 	bl	8000520 <HAL_GPIO_EXTI_Callback>
  }
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_PWREx_GetVoltageRange+0x18>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119a:	d130      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a8:	d038      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2232      	movs	r2, #50	; 0x32
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	3301      	adds	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d0:	e002      	b.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e4:	d102      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f2      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f8:	d110      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e00f      	b.n	800121e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120a:	d007      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40007000 	.word	0x40007000
 8001230:	20000000 	.word	0x20000000
 8001234:	431bde83 	.word	0x431bde83

08001238 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e3ca      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800124a:	4b97      	ldr	r3, [pc, #604]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001254:	4b94      	ldr	r3, [pc, #592]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 80e4 	beq.w	8001434 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <HAL_RCC_OscConfig+0x4a>
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2b0c      	cmp	r3, #12
 8001276:	f040 808b 	bne.w	8001390 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b01      	cmp	r3, #1
 800127e:	f040 8087 	bne.w	8001390 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x62>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e3a2      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1a      	ldr	r2, [r3, #32]
 800129e:	4b82      	ldr	r3, [pc, #520]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d004      	beq.n	80012b4 <HAL_RCC_OscConfig+0x7c>
 80012aa:	4b7f      	ldr	r3, [pc, #508]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b2:	e005      	b.n	80012c0 <HAL_RCC_OscConfig+0x88>
 80012b4:	4b7c      	ldr	r3, [pc, #496]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d223      	bcs.n	800130c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fd1d 	bl	8001d08 <RCC_SetFlashLatencyFromMSIRange>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e383      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d8:	4b73      	ldr	r3, [pc, #460]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a72      	ldr	r2, [pc, #456]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b70      	ldr	r3, [pc, #448]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	496d      	ldr	r1, [pc, #436]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f6:	4b6c      	ldr	r3, [pc, #432]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	4968      	ldr	r1, [pc, #416]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
 800130a:	e025      	b.n	8001358 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a65      	ldr	r2, [pc, #404]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4960      	ldr	r1, [pc, #384]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132a:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	495b      	ldr	r1, [pc, #364]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d109      	bne.n	8001358 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fcdd 	bl	8001d08 <RCC_SetFlashLatencyFromMSIRange>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e343      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001358:	f000 fc4a 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 800135c:	4602      	mov	r2, r0
 800135e:	4b52      	ldr	r3, [pc, #328]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	4950      	ldr	r1, [pc, #320]	; (80014ac <HAL_RCC_OscConfig+0x274>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	f003 031f 	and.w	r3, r3, #31
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001376:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001378:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb59 	bl	8000a34 <HAL_InitTick>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d052      	beq.n	8001432 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	e327      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d032      	beq.n	80013fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001398:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a42      	ldr	r2, [pc, #264]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb96 	bl	8000ad4 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ac:	f7ff fb92 	bl	8000ad4 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e310      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013be:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ca:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a36      	ldr	r2, [pc, #216]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4931      	ldr	r1, [pc, #196]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	492c      	ldr	r1, [pc, #176]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
 80013fc:	e01a      	b.n	8001434 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a29      	ldr	r2, [pc, #164]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140a:	f7ff fb63 	bl	8000ad4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001412:	f7ff fb5f 	bl	8000ad4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e2dd      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x1da>
 8001430:	e000      	b.n	8001434 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001432:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d074      	beq.n	800152a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b08      	cmp	r3, #8
 8001444:	d005      	beq.n	8001452 <HAL_RCC_OscConfig+0x21a>
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b0c      	cmp	r3, #12
 800144a:	d10e      	bne.n	800146a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b03      	cmp	r3, #3
 8001450:	d10b      	bne.n	800146a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d064      	beq.n	8001528 <HAL_RCC_OscConfig+0x2f0>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d160      	bne.n	8001528 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e2ba      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x24a>
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800147a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e026      	b.n	80014d0 <HAL_RCC_OscConfig+0x298>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800148a:	d115      	bne.n	80014b8 <HAL_RCC_OscConfig+0x280>
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a02      	ldr	r2, [pc, #8]	; (80014a8 <HAL_RCC_OscConfig+0x270>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e014      	b.n	80014d0 <HAL_RCC_OscConfig+0x298>
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	0800249c 	.word	0x0800249c
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004
 80014b8:	4ba0      	ldr	r3, [pc, #640]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a9f      	ldr	r2, [pc, #636]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b9d      	ldr	r3, [pc, #628]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a9c      	ldr	r2, [pc, #624]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fafc 	bl	8000ad4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff faf8 	bl	8000ad4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e276      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f2:	4b92      	ldr	r3, [pc, #584]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2a8>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fae8 	bl	8000ad4 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fae4 	bl	8000ad4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e262      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151a:	4b88      	ldr	r3, [pc, #544]	; (800173c <HAL_RCC_OscConfig+0x504>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d0>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d060      	beq.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b04      	cmp	r3, #4
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x310>
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d119      	bne.n	8001576 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d116      	bne.n	8001576 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001548:	4b7c      	ldr	r3, [pc, #496]	; (800173c <HAL_RCC_OscConfig+0x504>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x328>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e23f      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b76      	ldr	r3, [pc, #472]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	4973      	ldr	r1, [pc, #460]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001574:	e040      	b.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d023      	beq.n	80015c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157e:	4b6f      	ldr	r3, [pc, #444]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff faa3 	bl	8000ad4 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fa9f 	bl	8000ad4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e21d      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a4:	4b65      	ldr	r3, [pc, #404]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b62      	ldr	r3, [pc, #392]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	061b      	lsls	r3, r3, #24
 80015be:	495f      	ldr	r1, [pc, #380]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e018      	b.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a5c      	ldr	r2, [pc, #368]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80015cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	f7ff fa7f 	bl	8000ad4 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fa7b 	bl	8000ad4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1f9      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ec:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d03c      	beq.n	800167e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160c:	4b4b      	ldr	r3, [pc, #300]	; (800173c <HAL_RCC_OscConfig+0x504>)
 800160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001612:	4a4a      	ldr	r2, [pc, #296]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fa5a 	bl	8000ad4 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fa56 	bl	8000ad4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1d4      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ef      	beq.n	8001624 <HAL_RCC_OscConfig+0x3ec>
 8001644:	e01b      	b.n	800167e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164c:	4a3b      	ldr	r2, [pc, #236]	; (800173c <HAL_RCC_OscConfig+0x504>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff fa3d 	bl	8000ad4 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fa39 	bl	8000ad4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1b7      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ef      	bne.n	800165e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80a6 	beq.w	80017d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10d      	bne.n	80016b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_RCC_OscConfig+0x504>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6593      	str	r3, [r2, #88]	; 0x58
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_RCC_OscConfig+0x504>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <HAL_RCC_OscConfig+0x508>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d118      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_RCC_OscConfig+0x508>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_RCC_OscConfig+0x508>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d0:	f7ff fa00 	bl	8000ad4 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff f9fc 	bl	8000ad4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e17a      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_RCC_OscConfig+0x508>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <HAL_RCC_OscConfig+0x4d8>
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800170e:	e029      	b.n	8001764 <HAL_RCC_OscConfig+0x52c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d115      	bne.n	8001744 <HAL_RCC_OscConfig+0x50c>
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_RCC_OscConfig+0x504>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_RCC_OscConfig+0x504>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_RCC_OscConfig+0x504>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001738:	e014      	b.n	8001764 <HAL_RCC_OscConfig+0x52c>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40007000 	.word	0x40007000
 8001744:	4b9c      	ldr	r3, [pc, #624]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	4a9b      	ldr	r2, [pc, #620]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001754:	4b98      	ldr	r3, [pc, #608]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175a:	4a97      	ldr	r2, [pc, #604]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d016      	beq.n	800179a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff f9b2 	bl	8000ad4 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff f9ae 	bl	8000ad4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e12a      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178a:	4b8b      	ldr	r3, [pc, #556]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ed      	beq.n	8001774 <HAL_RCC_OscConfig+0x53c>
 8001798:	e015      	b.n	80017c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff f99b 	bl	8000ad4 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff f997 	bl	8000ad4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e113      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b8:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ed      	bne.n	80017a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017cc:	4b7a      	ldr	r3, [pc, #488]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	4a79      	ldr	r2, [pc, #484]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 80017d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80fe 	beq.w	80019de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	f040 80d0 	bne.w	800198c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017ec:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0203 	and.w	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d130      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	3b01      	subs	r3, #1
 800180c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d127      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d11f      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800182c:	2a07      	cmp	r2, #7
 800182e:	bf14      	ite	ne
 8001830:	2201      	movne	r2, #1
 8001832:	2200      	moveq	r2, #0
 8001834:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001836:	4293      	cmp	r3, r2
 8001838:	d113      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	3b01      	subs	r3, #1
 8001848:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d109      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	3b01      	subs	r3, #1
 800185c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d06e      	beq.n	8001940 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d069      	beq.n	800193c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001868:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001874:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0ad      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001884:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a4b      	ldr	r2, [pc, #300]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800188a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800188e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001890:	f7ff f920 	bl	8000ad4 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f91c 	bl	8000ad4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e09a      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b6:	4b40      	ldr	r3, [pc, #256]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	4b40      	ldr	r3, [pc, #256]	; (80019bc <HAL_RCC_OscConfig+0x784>)
 80018bc:	4013      	ands	r3, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018c6:	3a01      	subs	r2, #1
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018d0:	0212      	lsls	r2, r2, #8
 80018d2:	4311      	orrs	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018d8:	0852      	lsrs	r2, r2, #1
 80018da:	3a01      	subs	r2, #1
 80018dc:	0552      	lsls	r2, r2, #21
 80018de:	4311      	orrs	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018e4:	0852      	lsrs	r2, r2, #1
 80018e6:	3a01      	subs	r2, #1
 80018e8:	0652      	lsls	r2, r2, #25
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018f0:	0912      	lsrs	r2, r2, #4
 80018f2:	0452      	lsls	r2, r2, #17
 80018f4:	430a      	orrs	r2, r1
 80018f6:	4930      	ldr	r1, [pc, #192]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018fc:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001906:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4a2a      	ldr	r2, [pc, #168]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001914:	f7ff f8de 	bl	8000ad4 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff f8da 	bl	8000ad4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e058      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800193a:	e050      	b.n	80019de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e04f      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d148      	bne.n	80019de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4a16      	ldr	r2, [pc, #88]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001964:	f7ff f8b6 	bl	8000ad4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f8b2 	bl	8000ad4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e030      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x734>
 800198a:	e028      	b.n	80019de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d023      	beq.n	80019da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff f899 	bl	8000ad4 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	e00c      	b.n	80019c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff f895 	bl	8000ad4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d905      	bls.n	80019c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e013      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_OscConfig+0x7b0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1ec      	bne.n	80019a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_OscConfig+0x7b0>)
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	4905      	ldr	r1, [pc, #20]	; (80019e8 <HAL_RCC_OscConfig+0x7b0>)
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_OscConfig+0x7b4>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
 80019d8:	e001      	b.n	80019de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000
 80019ec:	feeefffc 	.word	0xfeeefffc

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0e7      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b75      	ldr	r3, [pc, #468]	; (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d910      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b72      	ldr	r3, [pc, #456]	; (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	4970      	ldr	r1, [pc, #448]	; (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b6e      	ldr	r3, [pc, #440]	; (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0cf      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d010      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4b66      	ldr	r3, [pc, #408]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d908      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4960      	ldr	r1, [pc, #384]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d04c      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	4b5a      	ldr	r3, [pc, #360]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d121      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0a6      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8e:	4b54      	ldr	r3, [pc, #336]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d115      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e09a      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa6:	4b4e      	ldr	r3, [pc, #312]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e08e      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab6:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e086      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4943      	ldr	r1, [pc, #268]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad8:	f7fe fffc 	bl	8000ad4 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7fe fff8 	bl	8000ad4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e06e      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d010      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d208      	bcs.n	8001b36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	492b      	ldr	r1, [pc, #172]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d210      	bcs.n	8001b66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 0207 	bic.w	r2, r3, #7
 8001b4c:	4923      	ldr	r1, [pc, #140]	; (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e036      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4918      	ldr	r1, [pc, #96]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d009      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4910      	ldr	r1, [pc, #64]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ba4:	f000 f824 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	490b      	ldr	r1, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x1f4>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_RCC_ClockConfig+0x1fc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe ff33 	bl	8000a34 <HAL_InitTick>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40022000 	.word	0x40022000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	0800249c 	.word	0x0800249c
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c08:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x34>
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d121      	bne.n	8001c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d11e      	bne.n	8001c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c24:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c30:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e005      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	e004      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d134      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d003      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0xac>
 8001c94:	e005      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c98:	617b      	str	r3, [r7, #20]
      break;
 8001c9a:	e005      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c9e:	617b      	str	r3, [r7, #20]
      break;
 8001ca0:	e002      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	617b      	str	r3, [r7, #20]
      break;
 8001ca6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	fb03 f202 	mul.w	r2, r3, r2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	0e5b      	lsrs	r3, r3, #25
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	080024ac 	.word	0x080024ac
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	007a1200 	.word	0x007a1200

08001d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d20:	f7ff fa26 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001d24:	6178      	str	r0, [r7, #20]
 8001d26:	e014      	b.n	8001d52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6593      	str	r3, [r2, #88]	; 0x58
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d40:	f7ff fa16 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001d44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d58:	d10b      	bne.n	8001d72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b80      	cmp	r3, #128	; 0x80
 8001d5e:	d919      	bls.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2ba0      	cmp	r3, #160	; 0xa0
 8001d64:	d902      	bls.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d66:	2302      	movs	r3, #2
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e013      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e010      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b80      	cmp	r3, #128	; 0x80
 8001d76:	d902      	bls.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d78:	2303      	movs	r3, #3
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e00a      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b80      	cmp	r3, #128	; 0x80
 8001d82:	d102      	bne.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d84:	2302      	movs	r3, #2
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	e004      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b70      	cmp	r3, #112	; 0x70
 8001d8e:	d101      	bne.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d90:	2301      	movs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 0207 	bic.w	r2, r3, #7
 8001d9c:	4909      	ldr	r1, [pc, #36]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40022000 	.word	0x40022000

08001dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e049      	b.n	8001e6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fd66 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f000 f9d0 	bl	80021ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d001      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e04f      	b.n	8001f30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01d      	beq.n	8001eee <HAL_TIM_Base_Start_IT+0x76>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d018      	beq.n	8001eee <HAL_TIM_Base_Start_IT+0x76>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_TIM_Base_Start_IT+0x76>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00e      	beq.n	8001eee <HAL_TIM_Base_Start_IT+0x76>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d009      	beq.n	8001eee <HAL_TIM_Base_Start_IT+0x76>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d004      	beq.n	8001eee <HAL_TIM_Base_Start_IT+0x76>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d115      	bne.n	8001f1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b06      	cmp	r3, #6
 8001efe:	d015      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0xb4>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f06:	d011      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f18:	e008      	b.n	8001f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e000      	b.n	8001f2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40000800 	.word	0x40000800
 8001f48:	40000c00 	.word	0x40000c00
 8001f4c:	40013400 	.word	0x40013400
 8001f50:	40014000 	.word	0x40014000
 8001f54:	00010007 	.word	0x00010007

08001f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d020      	beq.n	8001fbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01b      	beq.n	8001fbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0202 	mvn.w	r2, #2
 8001f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8e4 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8d6 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8e7 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d020      	beq.n	8002008 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0204 	mvn.w	r2, #4
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8be 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8b0 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f8c1 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d020      	beq.n	8002054 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01b      	beq.n	8002054 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0208 	mvn.w	r2, #8
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f898 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f88a 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f89b 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d020      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0210 	mvn.w	r2, #16
 8002070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2208      	movs	r2, #8
 8002076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f872 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f864 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f875 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0201 	mvn.w	r2, #1
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe fc66 	bl	8000990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f98e 	bl	8002404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f986 	bl	8002418 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f834 	bl	8002198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00c      	beq.n	8002154 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0220 	mvn.w	r2, #32
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f94e 	bl	80023f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a40      	ldr	r2, [pc, #256]	; (80022c0 <TIM_Base_SetConfig+0x114>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ca:	d00f      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3d      	ldr	r2, [pc, #244]	; (80022c4 <TIM_Base_SetConfig+0x118>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00b      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3c      	ldr	r2, [pc, #240]	; (80022c8 <TIM_Base_SetConfig+0x11c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d007      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <TIM_Base_SetConfig+0x120>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d003      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <TIM_Base_SetConfig+0x124>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d108      	bne.n	80021fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a2f      	ldr	r2, [pc, #188]	; (80022c0 <TIM_Base_SetConfig+0x114>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01f      	beq.n	8002246 <TIM_Base_SetConfig+0x9a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d01b      	beq.n	8002246 <TIM_Base_SetConfig+0x9a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <TIM_Base_SetConfig+0x118>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d017      	beq.n	8002246 <TIM_Base_SetConfig+0x9a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a2b      	ldr	r2, [pc, #172]	; (80022c8 <TIM_Base_SetConfig+0x11c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <TIM_Base_SetConfig+0x9a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <TIM_Base_SetConfig+0x120>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00f      	beq.n	8002246 <TIM_Base_SetConfig+0x9a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <TIM_Base_SetConfig+0x124>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00b      	beq.n	8002246 <TIM_Base_SetConfig+0x9a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <TIM_Base_SetConfig+0x128>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d007      	beq.n	8002246 <TIM_Base_SetConfig+0x9a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <TIM_Base_SetConfig+0x12c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d003      	beq.n	8002246 <TIM_Base_SetConfig+0x9a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a26      	ldr	r2, [pc, #152]	; (80022dc <TIM_Base_SetConfig+0x130>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d108      	bne.n	8002258 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <TIM_Base_SetConfig+0x114>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00f      	beq.n	80022a4 <TIM_Base_SetConfig+0xf8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <TIM_Base_SetConfig+0x124>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00b      	beq.n	80022a4 <TIM_Base_SetConfig+0xf8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <TIM_Base_SetConfig+0x128>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d007      	beq.n	80022a4 <TIM_Base_SetConfig+0xf8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <TIM_Base_SetConfig+0x12c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <TIM_Base_SetConfig+0xf8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <TIM_Base_SetConfig+0x130>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	615a      	str	r2, [r3, #20]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40000c00 	.word	0x40000c00
 80022d0:	40013400 	.word	0x40013400
 80022d4:	40014000 	.word	0x40014000
 80022d8:	40014400 	.word	0x40014400
 80022dc:	40014800 	.word	0x40014800

080022e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e068      	b.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d004      	beq.n	800232c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2d      	ldr	r2, [pc, #180]	; (80023dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d108      	bne.n	800233e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002332:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002344:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01d      	beq.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236a:	d018      	beq.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a18      	ldr	r2, [pc, #96]	; (80023e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a14      	ldr	r2, [pc, #80]	; (80023ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10c      	bne.n	80023b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40012c00 	.word	0x40012c00
 80023dc:	40013400 	.word	0x40013400
 80023e0:	40000400 	.word	0x40000400
 80023e4:	40000800 	.word	0x40000800
 80023e8:	40000c00 	.word	0x40000c00
 80023ec:	40014000 	.word	0x40014000

080023f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <memset>:
 800242c:	4402      	add	r2, r0
 800242e:	4603      	mov	r3, r0
 8002430:	4293      	cmp	r3, r2
 8002432:	d100      	bne.n	8002436 <memset+0xa>
 8002434:	4770      	bx	lr
 8002436:	f803 1b01 	strb.w	r1, [r3], #1
 800243a:	e7f9      	b.n	8002430 <memset+0x4>

0800243c <__libc_init_array>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	4d0d      	ldr	r5, [pc, #52]	; (8002474 <__libc_init_array+0x38>)
 8002440:	4c0d      	ldr	r4, [pc, #52]	; (8002478 <__libc_init_array+0x3c>)
 8002442:	1b64      	subs	r4, r4, r5
 8002444:	10a4      	asrs	r4, r4, #2
 8002446:	2600      	movs	r6, #0
 8002448:	42a6      	cmp	r6, r4
 800244a:	d109      	bne.n	8002460 <__libc_init_array+0x24>
 800244c:	4d0b      	ldr	r5, [pc, #44]	; (800247c <__libc_init_array+0x40>)
 800244e:	4c0c      	ldr	r4, [pc, #48]	; (8002480 <__libc_init_array+0x44>)
 8002450:	f000 f818 	bl	8002484 <_init>
 8002454:	1b64      	subs	r4, r4, r5
 8002456:	10a4      	asrs	r4, r4, #2
 8002458:	2600      	movs	r6, #0
 800245a:	42a6      	cmp	r6, r4
 800245c:	d105      	bne.n	800246a <__libc_init_array+0x2e>
 800245e:	bd70      	pop	{r4, r5, r6, pc}
 8002460:	f855 3b04 	ldr.w	r3, [r5], #4
 8002464:	4798      	blx	r3
 8002466:	3601      	adds	r6, #1
 8002468:	e7ee      	b.n	8002448 <__libc_init_array+0xc>
 800246a:	f855 3b04 	ldr.w	r3, [r5], #4
 800246e:	4798      	blx	r3
 8002470:	3601      	adds	r6, #1
 8002472:	e7f2      	b.n	800245a <__libc_init_array+0x1e>
 8002474:	080024dc 	.word	0x080024dc
 8002478:	080024dc 	.word	0x080024dc
 800247c:	080024dc 	.word	0x080024dc
 8002480:	080024e0 	.word	0x080024e0

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
